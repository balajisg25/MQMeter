import React, { useState } from "react";
import { Container, Card, Button, Typography, Box, Input } from "@mui/material";
import * as XLSX from "xlsx";

function App() {
  const [selectedApp, setSelectedApp] = useState("");
  const [excelData, setExcelData] = useState([]);
  const [scriptData, setScriptData] = useState("");

  // Load Excel Data from public folder
  const loadExcelData = async () => {
    const response = await fetch("/loadrunner_data.xlsx"); // Excel file in the public folder
    const arrayBuffer = await response.arrayBuffer();
    const data = new Uint8Array(arrayBuffer);
    const workbook = XLSX.read(data, { type: "array" });
    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
    const jsonData = XLSX.utils.sheet_to_json(worksheet);
    setExcelData(jsonData);
  };

  const handleScriptUpload = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      const script = reader.result;
      setScriptData(script);
    };
    reader.readAsText(file);
  };

  // Regex pattern to match URLs in web_custom_request and web_url
  const urlRegex = /(?:web_(?:custom_request|url)[^"]*?\s*URL\s*=\s*")([^"]+)"/g;

  const processScript = () => {
    if (!scriptData || excelData.length === 0) return;

    let modifiedScript = scriptData;

    // Extract all URLs using regex
    const urls = [];
    let match;
    while ((match = urlRegex.exec(scriptData)) !== null) {
      urls.push(match[1]);
    }

    console.log("Extracted URLs:", urls);

    // Modify the URLs based on the Prefix and Suffix from Excel data
    excelData.forEach(({ URL, Prefix, Suffix }) => {
      urls.forEach((url) => {
        if (url === URL) {
          const modifiedUrl = `${Prefix}${url}${Suffix}`;
          // Replace the original URL in the script with the modified one
          const urlRegexForReplacement = new RegExp(`(${URL})`, "g");
          modifiedScript = modifiedScript.replace(urlRegexForReplacement, modifiedUrl);
        }
      });
    });

    // Save the processed script as a new file
    const blob = new Blob([modifiedScript], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "modified_loadrunner_script.c";
    link.click();
  };

  return (
    <Container maxWidth="md" style={{ marginTop: 20 }}>
      <Card style={{ padding: 20, textAlign: "center" }}>
        <Typography variant="h5" gutterBottom>
          LoadRunner Script Processor
        </Typography>

        <Button
          style={{
            backgroundColor: "black",
            color: "white",
            marginTop: "20px",
            padding: "10px 20px",
          }}
          onClick={loadExcelData} // Load Excel data
        >
          Load Excel Data
        </Button>

        <Box mt={3}>
          <Input
            type="file"
            accept=".c"
            onChange={handleScriptUpload} // Upload script
            style={{ marginBottom: 20 }}
          />
        </Box>

        <Button
          style={{
            backgroundColor: "black",
            color: "white",
            marginTop: "20px",
            padding: "10px 20px",
          }}
          onClick={processScript} // Process the script
        >
          Process Script
        </Button>

        <Box mt={3}>
          <Typography variant="h6">Script Data:</Typography>
          <pre>{scriptData}</pre>
        </Box>
      </Card>
    </Container>
  );
}

export default App;