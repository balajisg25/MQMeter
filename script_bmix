import React, { useState } from "react";
import {
  Button,
  Card,
  CardContent,
  Typography,
  Radio,
  RadioGroup,
  FormControlLabel,
  FormControl,
  FormLabel,
  LinearProgress,
} from "@mui/material";
import * as XLSX from "xlsx";

function App() {
  const [selectedApp, setSelectedApp] = useState("app1"); // Default app
  const [excelData, setExcelData] = useState([]);
  const [scriptFiles, setScriptFiles] = useState([]);
  const [progress, setProgress] = useState(0);
  const [message, setMessage] = useState("");

  const handleAppChange = (event) => {
    setSelectedApp(event.target.value);
    setExcelData([]); // Clear previous Excel data
    setMessage(`Loading ${event.target.value}.xlsx...`);
    loadExcelData(event.target.value);
  };

  const loadExcelData = async (appName) => {
    try {
      const fileResponse = await fetch(`/${appName}.xlsx`);
      const fileBlob = await fileResponse.blob();
      const reader = new FileReader();
      reader.onload = (e) => {
        const workbook = XLSX.read(e.target.result, { type: "binary" });
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const dataJson = XLSX.utils.sheet_to_json(sheet, { header: 1 });

        const extractedData = dataJson.slice(1).map((row) => ({
          url: row[1], // Column B: URL
          prefix: row[2], // Column C: Prefix
          suffix: row[3], // Column D: Suffix
        }));

        setExcelData(extractedData);
        setMessage(`${appName}.xlsx loaded successfully.`);
      };
      reader.readAsBinaryString(fileBlob);
    } catch (error) {
      setMessage("Error loading Excel file.");
    }
  };

  const handleScriptUpload = (event) => {
    const files = Array.from(event.target.files).filter((file) =>
      file.name.endsWith(".c")
    );

    if (files.length === 0) {
      setMessage("Please upload .c files.");
      return;
    }

    const filePromises = files.map((file) => {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve({ name: file.name, content: e.target.result });
        reader.readAsText(file);
      });
    });

    Promise.all(filePromises).then((results) => {
      setScriptFiles(results);
      setMessage(`Loaded ${results.length} script files.`);
    });
  };

  const processScripts = () => {
    if (!scriptFiles.length || !excelData.length) {
      setMessage("Please upload scripts and select an Excel file.");
      return;
    }

    let processedFiles = [];
    let totalLines = scriptFiles.reduce(
      (sum, file) => sum + file.content.split("\n").length,
      0
    );
    let processedCount = 0;

    scriptFiles.forEach((file) => {
      let scriptLines = file.content.split("\n");
      let updatedScript = "";

      scriptLines.forEach((line) => {
        excelData.forEach(({ url, prefix, suffix }) => {
          if (line.includes(url)) {
            line = `${prefix} ${line} ${suffix}`;
          }
        });

        updatedScript += line + "\n";
        processedCount++;
        setProgress(Math.round((processedCount / totalLines) * 100));
      });

      processedFiles.push({ name: file.name, content: updatedScript });
    });

    setScriptFiles(processedFiles);
    setMessage("Scripts processed successfully.");
  };

  const downloadProcessedFiles = () => {
    scriptFiles.forEach((file) => {
      const blob = new Blob([file.content], { type: "text/plain" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = file.name;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    });
  };

  return (
    <div>
      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            LoadRunner Script URL Updater
          </Typography>

          {/* Radio Buttons for app selection */}
          <FormControl component="fieldset">
            <FormLabel component="legend">Select Application</FormLabel>
            <RadioGroup row value={selectedApp} onChange={handleAppChange}>
              <FormControlLabel value="app1" control={<Radio />} label="App 1" />
              <FormControlLabel value="app2" control={<Radio />} label="App 2" />
              <FormControlLabel value="app3" control={<Radio />} label="App 3" />
              <FormControlLabel value="app4" control={<Radio />} label="App 4" />
            </RadioGroup>
          </FormControl>

          {/* Upload LoadRunner script folder */}
          <Button variant="contained" component="label">
            Upload Script Files (.c)
            <input type="file" accept=".c" multiple hidden onChange={handleScriptUpload} />
          </Button>

          {/* Button to process scripts */}
          <Button
            variant="contained"
            color="primary"
            onClick={processScripts}
            disabled={!scriptFiles.length || !excelData.length}
          >
            Process Scripts
          </Button>

          {/* Progress Bar */}
          <LinearProgress variant="determinate" value={progress} />

          {/* Message to show the status */}
          {message && <Typography variant="body2">{message}</Typography>}

          {/* Download processed scripts */}
          {scriptFiles.length > 0 && (
            <Button variant="contained" color="secondary" onClick={downloadProcessedFiles}>
              Download Processed Scripts
            </Button>
          )}

          {/* Processed Script Preview */}
          <Typography variant="body1" gutterBottom>
            Processed Script Preview:
          </Typography>
          {scriptFiles.map((file, index) => (
            <div key={index}>
              <Typography variant="body2">{file.name}</Typography>
              <textarea
                value={file.content}
                readOnly
                rows={10}
                cols={80}
                style={{ width: "100%" }}
              />
            </div>
          ))}
        </CardContent>
      </Card>
    </div>
  );
}

export default App;