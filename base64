#include "web_api.h"
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Function prototypes
void generate_random_string(char *buffer, int length);
void base64_encode(const char *input, int length, char *output);

Action()
{
    char random_str[17];    // Holds 16 random characters + null
    char encoded_str[25];   // Base64 output (24 chars + null)
    int desired_length = 16;

    // Seed the random generator
    srand((unsigned int)time(NULL));

    // Generate random string
    generate_random_string(random_str, desired_length);
    lr_output_message("Random String: %s", random_str);

    // Base64 encode the string
    base64_encode(random_str, strlen(random_str), encoded_str);
    lr_output_message("Base64 Encoded: %s", encoded_str);

    return 0;
}

// Generates a random alphanumeric string
void generate_random_string(char *buffer, int length) {
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    for (int i = 0; i < length; i++) {
        buffer[i] = charset[rand() % (sizeof(charset) - 1)];
    }
    buffer[length] = '\0';
}

// Encodes a string to Base64
void base64_encode(const char *input, int length, char *output) {
    const char base64_chars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    int i = 0, j = 0;
    unsigned char byte3[3], byte4[4];

    while (length--) {
        byte3[i++] = *(input++);
        if (i == 3) { // Process every 3 bytes
            byte4[0] = (byte3[0] & 0xFC) >> 2;
            byte4[1] = ((byte3[0] & 0x03) << 4) | ((byte3[1] & 0xF0) >> 4);
            byte4[2] = ((byte3[1] & 0x0F) << 2) | ((byte3[2] & 0xC0) >> 6);
            byte4[3] = byte3[2] & 0x3F;

            for (i = 0; i < 4; i++) {
                output[j++] = base64_chars[byte4[i]];
            }
            i = 0;
        }
    }

    // Add padding if needed
    if (i > 0) {
        for (int k = i; k < 3; k++) byte3[k] = '\0';

        byte4[0] = (byte3[0] & 0xFC) >> 2;
        byte4[1] = ((byte3[0] & 0x03) << 4) | ((byte3[1] & 0xF0) >> 4);
        byte4[2] = ((byte3[1] & 0x0F) << 2) | ((byte3[2] & 0xC0) >> 6);
        byte4[3] = byte3[2] & 0x3F;

        for (int k = 0; k < i + 1; k++) {
            output[j++] = base64_chars[byte4[k]];
        }

        while (i++ < 3) output[j++] = '='; // Add padding
    }

    output[j] = '\0'; // Null-terminate
}