#ifndef _CUSTOM_H_
#define _CUSTOM_H_

#include <string.h>
#include <stdlib.h>
#include "lrw_custom_body.h"

// Base64 Encoding function
char* base64_encode(const char* input) {
    static const char encoding_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    unsigned int input_length = strlen(input);
    unsigned int output_length = 4 * ((input_length + 2) / 3);
    char* output = (char*)malloc(output_length + 1);
    
    if (output == NULL) return NULL;  // Error handling
    
    unsigned int i = 0, j = 0;
    while (i < input_length) {
        unsigned int octet_a = i < input_length ? (unsigned char)input[i++] : 0;
        unsigned int octet_b = i < input_length ? (unsigned char)input[i++] : 0;
        unsigned int octet_c = i < input_length ? (unsigned char)input[i++] : 0;
        
        unsigned int triple = (octet_a << 16) + (octet_b << 8) + octet_c;
        
        output[j++] = encoding_table[(triple >> 18) & 0x3F];
        output[j++] = encoding_table[(triple >> 12) & 0x3F];
        output[j++] = encoding_table[(triple >> 6) & 0x3F];
        output[j++] = encoding_table[triple & 0x3F];
    }
    
    // Add padding if necessary
    for (unsigned int i = 0; i < output_length % 4; i++) {
        output[output_length - 1 - i] = '=';
    }
    
    output[output_length] = '\0';  // Null-terminate the string
    return output;
}

// Function to generate a random 16-character string and Base64 encode it
void generate_random_base64_string() {
    char randomString[17]; // 16 characters + null terminator
    unsigned int i;
    for (i = 0; i < 16; i++) {
        randomString[i] = (char)(rand() % 26 + 65);  // Uppercase letters (A-Z)
    }
    randomString[16] = '\0'; // Null-terminate the string

    // Encode the random string to Base64
    char* encodedString = base64_encode(randomString);

    // Check if Base64 encoding was successful
    if (encodedString != NULL) {
        // Save the Base64 encoded string to LoadRunner parameter
        lr_save_string(encodedString, "Base64EncodedString");

        // Output to debug
        lr_output_message("Random String: %s", randomString);
        lr_output_message("Base64 Encoded: %s", encodedString);

        // Clean up the dynamically allocated memory for Base64 encoded string
        free(encodedString);
    } else {
        lr_output_message("Base64 Encoding failed.");
    }
}

#endif // _CUSTOM_H_